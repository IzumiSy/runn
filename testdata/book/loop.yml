desc: Test using loop
runners:
  req: https://api.example.com
vars:
  hello: hi
steps:
  -
    desc: simple loop
    req:
      /users/k1LoW:
        get:
          body:
            application/json:
              null
    loop:
      count: 3
  -
    test: 'steps[0].res.rawBody contains "2"' # 0,1,2
  -
    desc: loop short syntax
    req:
      /users/k1LoW:
        get:
          body:
            application/json:
              null
    loop: 2
    bind:
      looptmp: current.res
      'loopvar[]': current.res
  -
    test: |
      // 3,4
      steps[2].res.rawBody contains "4"
      && loopvar[0].rawBody contains "3"
      && loopvar[1].rawBody contains "4"

  -
    desc: retry
    req:
      /users/k1LoW:
        get:
          body:
            application/json:
              null
    loop:
      count: 10
      until: 'current.res.rawBody contains "6" && i != nil' # 5,6
  -
    desc: retry with interval
    req:
      /users/k1LoW:
        get:
          body:
            application/json:
              null
    loop:
      count: 5
      interval: 0.001
      until: 'current.res.rawBody contains "8" && i != nil' # 7,8
  -
    desc: retry using default count
    req:
      /users/k1LoW:
        get:
          body:
            application/json:
              null
    loop:
      until: 'current.res.rawBody contains "10" && i != nil' # 9,10
  -
    desc: loop using result of expression evaluation
    req:
      /users/k1LoW:
        get:
          body:
            application/json:
              null
    loop: len(vars.hello)
    bind:
      'loopmap[vars.hello]': current.res
  -
    test: |
      // 11,12
      steps[7].res.rawBody contains "12"
      && loopmap['hi'].rawBody contains "12"
  -
    desc: Check that the values of the steps are not lost when using loop
    test: |
      steps[0] != null
      && steps[1] != null
      && steps[2] != null
      && steps[3] != null
      && steps[4] != null
      && steps[5] != null
      && steps[6] != null
      && steps[7] != null
      && steps[8] != null
